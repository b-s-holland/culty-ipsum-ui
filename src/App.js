import React, { useState, useCallback } from 'react';
import { AlertCircle, Download, Loader2, Zap, ChevronDown, ChevronUp } from 'lucide-react';

const CultyIpsumGenerator = () => {
  const [selectedPersona, setSelectedPersona] = useState('1');
  const [selectedIntensity, setSelectedIntensity] = useState('1');
  const [selectedLength, setSelectedLength] = useState('medium');
  const [customPrompt, setCustomPrompt] = useState('');
  const [generatedText, setGeneratedText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showAnalysis, setShowAnalysis] = useState(false);
  const [analysis, setAnalysis] = useState('');
  const [coerciveTactics, setCoerciveTactics] = useState([]);
  const [error, setError] = useState('');

  const personas = {
    "1": {
      name: "Motivational Speaker / Self-Help Author",
      defaultPrompt: "how to reclaim your personal power and manifest success",
      description: "TED Talk-style inspiration with rehearsed warmth"
    },
    "2": {
      name: "Crypto Bro Hustler",
      defaultPrompt: "why blockchain is the future of personal wealth",
      description: "Fast-talking, flex-heavy, aggressive FOMO bait"
    },
    "3": {
      name: "Feminine Embodiment Coach / Spiritual Entrepreneur",
      defaultPrompt: "how feminine energy heals the soul",
      description: "Whispery, slow, poetic and ceremonial cadence"
    },
    "4": {
      name: "MLM Boss Bitch / Pyramid Scheme Guru",
      defaultPrompt: "how joining my team will change your life forever",
      description: "Bubbly hustle-speak with faux intimacy"
    },
    "5": {
      name: "Conscious Capitalism Consultant",
      defaultPrompt: "the ethics of monetizing your higher purpose",
      description: "Soft-spoken corporate-therapist hybrid"
    },
    "6": {
      name: "Pseudo-Scientific LGAT (Cult) Leader",
      defaultPrompt: "Why do those closest to breakthrough often sabotage their own progress?",
      description: "Detached intellectualism with thin veneer of empathy"
    },
    "7": {
      name: "Silicon Valley Visionary",
      defaultPrompt: "why disruption is your birthright",
      description: "Detached futurist CEO-speak with buzzword spirals"
    },
    "8": {
      name: "Masculinity Gospel Life Coach / Alpha Fitness Bro",
      defaultPrompt: "how daily cold plunges dominate the weak mind",
      description: "Locker-room TED Talk meets ice-bath gospel"
    },
    "9": {
      name: "Fearmongering Politician",
      defaultPrompt: "how to protect your freedoms from dangerous outsiders",
      description: "Trump-style bravado meets populist paranoia"
    },
    "10": {
      name: "Televangelist / Snake Oil Preacher",
      defaultPrompt: "sow a seed of faith to reap divine rewards",
      description: "Booming, syrupy, alternating between comfort and fire-and-brimstone"
    },
    "11": {
      name: "Men's Rights / Anti-Feminist Influencer",
      defaultPrompt: "the truth modern feminism doesn't want you to hear",
      description: "Blunt, combative, and arrogant"
    }
  };

  const intensities = {
    "1": {
      label: "Chillingly Plausible",
      description: "Polished, believable, subtly manipulative, grounded"
    },
    "2": {
      label: "Certified Soul Coercion",
      description: "Louder, more urgent, more manipulative"
    },
    "3": {
      label: "Dissociative Vocabulary Syndrome",
      description: "Unhinged, hyperbolic, confusing yet compelling"
    }
  };

  const lengths = {
    "short": "Short (1-2 paragraphs)",
    "medium": "Medium (3‚Äì5 paragraphs)",
    "long": "Long (up to 8 paragraphs)"
  };

  // Mock API call for demo - replace with your actual API endpoint
  const apiCall = useCallback(async (endpoint, data) => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Mock response for demo
    return {
      generated_text: `This is a satirical example of ${personas[data.persona].name} content about "${data.prompt}". This would normally be generated by your backend API with the selected intensity level "${intensities[data.intensity].label}" and length "${lengths[data.length]}". 

The actual implementation would connect to your FastAPI backend running on your server. This text demonstrates the flow and UI without making real API calls.

In production, this would contain the actual generated satirical content based on your sophisticated prompt engineering and persona templates.`,
      analysis: "This text demonstrates typical manipulation patterns including emotional appeals, false urgency, and binary thinking frameworks designed to bypass critical reasoning.",
      coercive_tactics: [
        "üß† Thought Control: Uses specialized jargon to override critical thinking",
        "üö® Fear & Urgency: Creates artificial time pressure to bypass reasoning",
        "‚ù§Ô∏èüî• Emotional Guilt-Tripping: Uses shame-based language to manipulate compliance"
      ]
    };
  }, []);

  const handlePersonaChange = useCallback((personaId) => {
    setSelectedPersona(personaId);
    setCustomPrompt(personas[personaId].defaultPrompt);
  }, []);

  const handleGenerate = useCallback(async () => {
    if (!customPrompt.trim()) {
      setError('Please enter a prompt');
      return;
    }

    setIsLoading(true);
    setGeneratedText('');
    setAnalysis('');
    setCoerciveTactics([]);
    setShowAnalysis(false);
    setError('');

    try {
      const response = await apiCall('generate', {
        persona: selectedPersona,
        intensity: selectedIntensity,
        length: selectedLength,
        prompt: customPrompt.trim()
      });

      if (response.error) {
        throw new Error(response.error);
      }

      setGeneratedText(response.generated_text);
      setAnalysis(response.analysis);
      setCoerciveTactics(response.coercive_tactics);
      setShowAnalysis(true);
    } catch (error) {
      setError('Error generating text: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  }, [customPrompt, selectedPersona, selectedIntensity, selectedLength, apiCall]);

  const downloadText = useCallback(() => {
    const element = document.createElement('a');
    const file = new Blob([generatedText], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = 'culty_ipsum_output.txt';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    URL.revokeObjectURL(element.href);
  }, [generatedText]);

  const currentPrompt = customPrompt || personas[selectedPersona].defaultPrompt;

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white">
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Header */}
        <header className="text-center mb-12 animate-fade-in">
          <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-red-400 to-yellow-400 bg-clip-text text-transparent">
            üó£Ô∏è CULTY IPSUM
          </h1>
          <p className="text-lg md:text-xl text-gray-300 mb-2">Text Generator + üö© Red Flag Detector</p>
          <p className="text-gray-400 text-sm md:text-base">Satirical cult content generator for awareness and education</p>
        </header>

        {/* Error Display */}
        {error && (
          <div className="mb-8 p-4 bg-red-900/20 border border-red-700 rounded-lg animate-fade-in">
            <div className="flex items-center gap-2 text-red-400">
              <AlertCircle size={20} />
              <span>{error}</span>
            </div>
          </div>
        )}

        {/* Configuration Panel */}
        <div className="grid md:grid-cols-2 gap-4 md:gap-6 mb-8">
          {/* Persona Selection */}
          <div className="bg-gray-800/50 backdrop-blur-sm p-4 md:p-6 rounded-lg border border-gray-700 hover:border-purple-500/50 transition-all duration-300">
            <label className="block text-sm font-medium mb-3">Choose a Persona</label>
            <select
              value={selectedPersona}
              onChange={(e) => handlePersonaChange(e.target.value)}
              className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all text-sm md:text-base"
            >
              {Object.entries(personas).map(([id, persona]) => (
                <option key={id} value={id}>{persona.name}</option>
              ))}
            </select>
            <p className="text-xs text-gray-400 mt-2">{personas[selectedPersona].description}</p>
          </div>

          {/* Intensity Selection */}
          <div className="bg-gray-800/50 backdrop-blur-sm p-4 md:p-6 rounded-lg border border-gray-700 hover:border-purple-500/50 transition-all duration-300">
            <label className="block text-sm font-medium mb-3">Intensity Level</label>
            <select
              value={selectedIntensity}
              onChange={(e) => setSelectedIntensity(e.target.value)}
              className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all text-sm md:text-base"
            >
              {Object.entries(intensities).map(([id, intensity]) => (
                <option key={id} value={id}>{intensity.label}</option>
              ))}
            </select>
            <p className="text-xs text-gray-400 mt-2">{intensities[selectedIntensity].description}</p>
          </div>

          {/* Length Selection */}
          <div className="bg-gray-800/50 backdrop-blur-sm p-4 md:p-6 rounded-lg border border-gray-700 hover:border-purple-500/50 transition-all duration-300">
            <label className="block text-sm font-medium mb-3">Text Length</label>
            <select
              value={selectedLength}
              onChange={(e) => setSelectedLength(e.target.value)}
              className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all text-sm md:text-base"
            >
              {Object.entries(lengths).map(([id, length]) => (
                <option key={id} value={id}>{length}</option>
              ))}
            </select>
          </div>

          {/* Custom Prompt */}
          <div className="bg-gray-800/50 backdrop-blur-sm p-4 md:p-6 rounded-lg border border-gray-700 hover:border-purple-500/50 transition-all duration-300">
            <label className="block text-sm font-medium mb-3">Topic Prompt</label>
            <textarea
              value={currentPrompt}
              onChange={(e) => setCustomPrompt(e.target.value)}
              rows={4}
              className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none transition-all text-sm md:text-base"
              placeholder="Enter your topic prompt..."
            />
          </div>
        </div>

        {/* Generate Button */}
        <div className="text-center mb-8">
          <button
            onClick={handleGenerate}
            disabled={isLoading}
            className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 disabled:from-gray-600 disabled:to-gray-600 px-6 md:px-8 py-3 md:py-4 rounded-lg font-semibold text-base md:text-lg transition-all duration-200 disabled:cursor-not-allowed flex items-center gap-2 mx-auto transform hover:scale-105 disabled:hover:scale-100 shadow-lg hover:shadow-xl"
          >
            {isLoading ? (
              <>
                <Loader2 className="animate-spin" size={20} />
                <span className="hidden sm:inline">Summoning the script...</span>
                <span className="sm:hidden">Generating...</span>
              </>
            ) : (
              <>
                <Zap size={20} />
                Generate
              </>
            )}
          </button>
        </div>

        {/* Generated Text */}
        {generatedText && (
          <div className="mb-8 animate-fade-in">
            <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-4 gap-2">
              <h2 className="text-xl md:text-2xl font-bold">‚ú® Generated Text</h2>
              <button
                onClick={downloadText}
                className="bg-gray-700 hover:bg-gray-600 px-4 py-2 rounded-lg flex items-center gap-2 transition-all transform hover:scale-105 text-sm md:text-base w-full sm:w-auto justify-center sm:justify-start"
              >
                <Download size={16} />
                Download
              </button>
            </div>
            <div className="bg-gray-800/50 backdrop-blur-sm p-4 md:p-6 rounded-lg border border-gray-700 shadow-xl">
              <div className="prose prose-invert max-w-none">
                {generatedText.split('\n').map((paragraph, index) => (
                  paragraph.trim() && (
                    <p key={index} className="mb-4 text-gray-200 leading-relaxed text-sm md:text-base">
                      {paragraph}
                    </p>
                  )
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Analysis Section */}
        {(analysis || coerciveTactics.length > 0) && (
          <div className="mb-8 animate-fade-in">
            <button
              onClick={() => setShowAnalysis(!showAnalysis)}
              className="flex items-center gap-2 mb-4 text-lg md:text-xl font-bold text-red-400 hover:text-red-300 transition-colors transform hover:scale-105 w-full sm:w-auto"
            >
              <AlertCircle size={20} />
              üö© Red Flag Analysis
              {showAnalysis ? <ChevronUp size={16} /> : <ChevronDown size={16} />}
              <span className="text-xs md:text-sm ml-auto sm:ml-2">({showAnalysis ? 'Hide' : 'Show'})</span>
            </button>
            
            {showAnalysis && (
              <div className="space-y-4 md:space-y-6 animate-fade-in">
                {/* Summary */}
                {analysis && (
                  <div className="bg-red-900/20 backdrop-blur-sm p-4 md:p-6 rounded-lg border border-red-700">
                    <h3 className="text-base md:text-lg font-semibold mb-3 text-red-400">üìä Language Pattern Summary</h3>
                    <p className="text-gray-200 text-sm md:text-base">{analysis}</p>
                  </div>
                )}

                {/* Coercive Tactics */}
                {coerciveTactics.length > 0 && (
                  <div className="bg-yellow-900/20 backdrop-blur-sm p-4 md:p-6 rounded-lg border border-yellow-700">
                    <h3 className="text-base md:text-lg font-semibold mb-3 text-yellow-400">üéØ Coercive Tactics Detected</h3>
                    <ul className="space-y-2">
                      {coerciveTactics.map((tactic, index) => (
                        <li key={index} className="text-gray-200 flex items-start gap-2 text-sm md:text-base">
                          <span className="text-yellow-400 flex-shrink-0">‚Ä¢</span>
                          <span>{tactic}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* Disclaimer */}
        <footer className="bg-gray-800/50 backdrop-blur-sm p-4 md:p-6 rounded-lg border border-gray-700 text-center">
          <p className="text-xs md:text-sm text-gray-400">
            <strong>Disclaimer:</strong> This tool is for educational and awareness purposes only. 
            Generated content is satirical and designed to help identify manipulative language patterns.
          </p>
        </footer>
      </div>

      <style jsx>{`
        @keyframes fade-in {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade-in {
          animation: fade-in 0.3s ease-out;
        }
      `}</style>
    </div>
  );
};

export default CultyIpsumGenerator;